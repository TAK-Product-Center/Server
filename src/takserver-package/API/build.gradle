buildscript {
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:' + gradle_ospackage_version
    }
}

apply plugin: 'nebula.ospackage'
apply from: "../utils/utils.gradle"

// rpm postinstall script
def postinstall_script_api = '''\

chmod 644 /opt/tak/logging-restrictsize.xml
chmod 544 /opt/tak/*.bat
chmod 544 /opt/tak/*.sh

chmod 544 /opt/tak/API/*.sh
chmod u+w /opt/tak/API/takserver-api.sh
cp /opt/tak/API/takserver-api.sh /opt/tak
chown -f tak:tak /opt/tak/takserver-api.sh 2>/dev/null

chmod 500 /opt/tak/certs/*.sh
chmod 600 /opt/tak/certs/cert-metadata.sh

chown root:root /opt/tak/API/takserver-api
chmod 755 /opt/tak/API/takserver-api
cp /opt/tak/API/takserver-api /etc/init.d

rm -rf /opt/tak/API

chmod 755 /opt/tak/utils
mkdir -p /opt/tak/logs
chown tak:tak /opt/tak/logs
chmod 755 /opt/tak/logs
chown -f tak:tak /opt/tak/CoreConfig.xml 2>/dev/null
mkdir -p /opt/tak/iconsets
chown -fR tak:tak /opt/tak/iconsets
mkdir -p /opt/tak/webcontent/webtak-plugins/plugins
if [ ! -f /opt/tak/webcontent/webtak-plugins/webtak-manifest.json ]; then 
\techo -e "{\\n\\t\\"plugins\\": [], \\n\\t\\"iconSets\\": []\\n}" > /opt/tak/webcontent/webtak-plugins/webtak-manifest.json
fi
chown -fR tak:tak /opt/tak/webcontent
mkdir -p /opt/tak/logs
chown tak:tak /opt/tak/logs
mkdir -p /opt/tak/lib
chown tak:tak /opt/tak/lib

cp /opt/tak/certs-tmp/cert-metadata.sh /opt/tak/certs/. 2>/dev/null || :
cp /opt/tak/certs-tmp/config.cfg /opt/tak/certs/. 2>/dev/null || :
rm -rf /opt/tak/certs-tmp

# rename old tomcat if it exists
mv /opt/tak/apache-tomcat /opt/tak/apache-tomcat_NO_LONGER_USED &>/dev/null

echo "IMPORTANT: If you are going to use a database, make sure you copy the generated database password from /opt/tak/CoreConfig.example.xml on the database machine to your CoreConfig on this machine"
echo "Create login credentials for local adminstrative access to the configuration interface:"
echo "sudo java -jar /opt/tak/utils/UserManager.jar usermod -A -p <password> <username>"
echo "For secure operation, TAK Server requires a keystore and truststore (X.509 certificates). Follow the instructions in Appendix B of the configuration guide to create these certificates."
echo "Using Firefox or Chrome on this computer, browse to this address to verify keystore and truststore configuration:"
echo "http://localhost:8080" 
echo "Login with the administrative credentials specified above."
echo "Follow the instructions in the Installation section of the configuration guide to complete the setup process." 
'''


ospackage {
    packageName = 'takserver-api'
    version = takversion
    release = takreleaserpm
    os = LINUX
    arch = _arch
    user = _user
    permissionGroup = _permission_group
    packageGroup = _package_group
    packageDescription = _package_description
    license = _license
    url = _url
    summary = _summary

    preInstall _preinstall_script
    postInstall postinstall_script_api
    postUninstall _postuninstall_script

    from ("$buildDir/takArtifacts") {
        into 'opt/tak'
        fileMode = 444
        dirMode = 755
    }
}

task prePackage { }
prePackage.dependsOn ':takserver-core:bootWar'
prePackage.dependsOn ':takserver-usermanager:shadowJar'
prePackage.dependsOn ':takserver-takcl-core:publicJar'
prePackage.dependsOn copyJarsNoDb
prePackage.dependsOn copyWars
prePackage.dependsOn copyCoreConfigXSD
prePackage.dependsOn copyCoreConfigExample
prePackage.dependsOn copyAPIScripts
prePackage.dependsOn copyDocs
prePackage.dependsOn copyPolicy
prePackage.dependsOn copyLicense


buildRpm.dependsOn prePackage

buildDeb.dependsOn prePackage

buildRpm {
    requires('java-11-openjdk-devel')
}

// TODO: add deb package dependencies here
buildDeb { }


